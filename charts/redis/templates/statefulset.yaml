apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "redis.labels" . | nindent 4 }}
  {{- with (include "redis.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "redis.fullname" . }}
  replicas: {{ if eq .Values.architecture "standalone" }}1{{ else }}{{ .Values.replicaCount }}{{ end }}
  selector:
    matchLabels:
      {{- include "redis.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "redis.selectorLabels" . | nindent 8 }}
    spec:
{{- with (include "redis.imagePullSecrets" .) }}
{{ . | nindent 6 }}
{{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if include "redis.sentinelEnabled" . }}
        - name: redis-init
          image: {{ include "redis.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.image) }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              # Get pod ordinal from hostname
              POD_ORDINAL=$(hostname | sed 's/.*-//')
              MY_POD_NAME=$(hostname)
              
              # Copy base config
              cp {{ include "redis.configFullName" . }} /tmp/redis.conf
              
              # Try to query Sentinel for current master first (for restarts/failovers)
              echo "Checking if Sentinel is available and knows about a master..."
              MASTER_INFO=""
              
              # Quick check for Sentinel availability (don't wait too long during bootstrap)
              RETRY_COUNT=0
              MAX_RETRIES=3
              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                if timeout 2 nc -z {{ include "redis.fullname" . }}-sentinel {{ .Values.sentinel.port }} 2>/dev/null; then
                  echo "Sentinel service is reachable, querying for master..."
                  MASTER_INFO=$(timeout 3 {{ include "redis.sentinelMasterQuery" (dict "auth" .Values.auth.enabled "context" .) }} 2>/dev/null || echo "")
                  
                  if [ -n "$MASTER_INFO" ] && [ "$MASTER_INFO" != "Could not connect" ]; then
                    echo "Sentinel reports existing master: $MASTER_INFO"
                    break
                  fi
                fi
                
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "Sentinel attempt $RETRY_COUNT/$MAX_RETRIES failed"
                sleep 1
              done
              
              # Configure based on Sentinel info or fall back to bootstrap logic
              if [ -n "$MASTER_INFO" ] && [ "$MASTER_INFO" != "Could not connect" ]; then
                MASTER_IP=$(echo "$MASTER_INFO" | head -1)
                MASTER_PORT=$(echo "$MASTER_INFO" | tail -1)
                MY_IP=$(hostname -i)
                
                echo "Sentinel reports master at: $MASTER_IP:$MASTER_PORT"
                echo "My IP is: $MY_IP"
                
                # Configure based on Sentinel's view
                if [ "$MY_IP" != "$MASTER_IP" ]; then
                  echo "Configuring as replica of existing master $MASTER_IP:$MASTER_PORT"
                  echo "replicaof $MASTER_IP $MASTER_PORT" >> /tmp/redis.conf
                  {{- if .Values.auth.enabled }}
                  echo "masterauth ${REDIS_PASSWORD}" >> /tmp/redis.conf
                  {{- end }}
                else
                  echo "I am the current master according to Sentinel"
                fi
              else
                echo "No Sentinel master info available - using bootstrap logic"
                # Bootstrap: pod-0 starts as master, others as replicas
                if [ "$POD_ORDINAL" != "0" ]; then
                  echo "Non-pod-0 instance: configuring as replica of pod-0"
                  echo "replicaof {{ include "redis.fullname" . }}-0.{{ include "redis.fullname" . }} {{ .Values.service.port }}" >> /tmp/redis.conf
                  {{- if .Values.auth.enabled }}
                  echo "masterauth ${REDIS_PASSWORD}" >> /tmp/redis.conf
                  {{- end }}
                else
                  echo "Pod-0: starting as initial master (first time bootstrap)"
                fi
              fi
          {{- if .Values.auth.enabled }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.secretName" . }}
                  key: {{ include "redis.secretPasswordKey" . }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: {{ .Values.config.mountPath }}
            - name: redis-init-config
              mountPath: /tmp
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: {{ include "redis.image" . | quote }}
          imagePullPolicy: {{ include "common.imagePullPolicy" (dict "image" .Values.image) }}
          command:
            - /bin/sh
            - -c
            - |
              {{- if include "redis.sentinelEnabled" . }}
              CONFIG_FILE="/tmp/redis.conf"
              {{- else }}
              CONFIG_FILE="{{ include "redis.configFullName" . }}"
              {{- end }}
              {{- if .Values.auth.enabled }}
              redis-server "$CONFIG_FILE" --requirepass "${REDIS_PASSWORD}"
              {{- else }}
              redis-server "$CONFIG_FILE"
              {{- end }}
          {{- if include "redis.sentinelEnabled" . }}
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # Wait for Redis to fully start
                    echo "PostStart: Waiting for Redis to be ready..."
                    sleep 10
                    
                    # Check if we need to fix our role based on Sentinel
                    for i in $(seq 1 10); do
                      echo "PostStart attempt $i: Checking role consistency with Sentinel..."
                      
                      MASTER_INFO=$({{ include "redis.sentinelMasterQuery" (dict "auth" .Values.auth.enabled "context" .) }} 2>/dev/null || echo "")
                      
                      if [ -n "$MASTER_INFO" ] && [ "$MASTER_INFO" != "Could not connect" ]; then
                        MASTER_IP=$(echo "$MASTER_INFO" | head -1)
                        MY_IP=$(hostname -i)
                        MY_ROLE=$({{ include "redis.cli" (dict "auth" .Values.auth.enabled) }} info replication | grep "role:master" || echo "")
                        
                        echo "PostStart: Sentinel says master is $MASTER_IP, I am $MY_IP"
                        
                        # If I'm master but shouldn't be, step down
                        if [ -n "$MY_ROLE" ] && [ "$MY_IP" != "$MASTER_IP" ]; then
                          echo "PostStart: I am incorrectly master, becoming replica of $MASTER_IP"
                          {{ include "redis.cli" (dict "auth" .Values.auth.enabled) }} REPLICAOF "$MASTER_IP" 6379
                          {{- if .Values.auth.enabled }}
                          {{ include "redis.cli" (dict "auth" .Values.auth.enabled) }} CONFIG SET masterauth "${REDIS_PASSWORD}"
                          {{- end }}
                          echo "PostStart: Successfully reconfigured as replica"
                          break
                        else
                          echo "PostStart: Role is correct"
                          break
                        fi
                      fi
                      
                      echo "PostStart: Sentinel not ready, waiting..."
                      sleep 5
                    done
          {{- end }}
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          {{- if or .Values.auth.enabled .Values.extraEnv }}
          env:
            {{- if .Values.auth.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.secretName" . }}
                  key: {{ include "redis.secretPasswordKey" . }}
            {{- end }}
            {{- range .Values.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                {{- if .Values.auth.enabled }}
                - redis-cli -a ${REDIS_PASSWORD} ping
                {{- else }}
                - redis-cli ping
                {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                {{- if .Values.auth.enabled }}
                - redis-cli -a ${REDIS_PASSWORD} ping
                {{- else }}
                - redis-cli ping
                {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
            {{- if include "redis.sentinelEnabled" . }}
            - name: redis-init-config
              mountPath: /tmp
            {{- else if or .Values.config.content .Values.config.existingConfigmap }}
            - name: config
              mountPath: {{ .Values.config.mountPath }}
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
      volumes:
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        {{- if include "redis.sentinelEnabled" . }}
        - name: redis-init-config
          emptyDir: {}
        {{- end }}
        {{- if or .Values.config.content .Values.config.existingConfigmap }}
        - name: config
          configMap:
            {{- if .Values.config.existingConfigmap }}
            name: {{ .Values.config.existingConfigmap }}
            {{- else }}
            name: {{ include "redis.fullname" . }}-config
            {{- end }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- end }}
