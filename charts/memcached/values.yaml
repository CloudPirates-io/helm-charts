## @section Global parameters
global:
  ## @param global.imageRegistry Global Docker Image registry
  imageRegistry: ""
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  imagePullSecrets: []

## @section Common parameters
## @param nameOverride String to partially override memcached.fullname
nameOverride: ""
## @param fullnameOverride String to fully override memcached.fullname
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

## @param podAnnotations Annotations to add to the pods created by the deployment
podAnnotations: {}

## @section Memcached image parameters
image:
  ## @param image.registry Memcached image registry
  registry: docker.io
  ## @param image.repository Memcached image repository
  repository: memcached
  ## @param image.tag Memcached image tag
  tag: "1.6.39@sha256:edbe8e8cf9014c5b2ed90b498facc32a590a607e5438899df63d51e3369e68cb"
  ## @param image.pullPolicy Memcached image pull policy
  pullPolicy: Always

## @param replicaCount Number of Memcached replicas to deploy
replicaCount: 1

service:
  ## @param service.type Kubernetes service type
  type: ClusterIP
  ## @param service.port Memcached service port
  port: 11211

## @section Ingress parameters
ingress:
  ## @param ingress.enabled Enable ingress record generation
  enabled: false
  ## @param ingress.className IngressClass that will be be used to implement the Ingress
  className: ""
  ## @param ingress.annotations Additional annotations for the Ingress resource
  annotations: {}
  ## @param ingress.hosts An array with hosts and paths
  hosts:
    - host: memcached.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  ## @param ingress.tls An array with the tls configuration
  tls: []

## @section Service Account parameters
serviceAccount:
  ## @param serviceAccount.create Specifies whether a service account should be created
  create: true
  ## @param serviceAccount.annotations Annotations to add to the service account
  annotations: {}
  ## @param serviceAccount.name The name of the service account to use
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Automatically mount service account token
  automountServiceAccountToken: false

## @section ConfigMap parameters
configMap:
  ## @param configMap.create Create a ConfigMap for Memcached configuration
  create: false
  ## @param configMap.data ConfigMap data
  data: {}

## @section Memcached configuration options
config:
  ## @param config.memoryLimit Maximum amount of memory to use for cache (in MB)
  memoryLimit: 64
  ## @param config.maxConnections Maximum number of simultaneous connections
  maxConnections: 1024
  ## @param config.extraArgs Additional command-line arguments
  extraArgs: []
  ## @param config.verbosity Verbosity level (0-2)
  verbosity: 0

## @param resources Resource limits and requests for Memcached pod
resources:
  {}
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   memory: 128Mi
  # requests:
  #   cpu: 50m
  #   memory: 64Mi

## @param nodeSelector Node selector for pod assignment
nodeSelector: {}

## @param tolerations Tolerations for pod assignment
tolerations: []

## @param affinity Affinity rules for pod assignment
affinity: {}

## @section Pod Disruption Budget parameters
pdb:
  ## @param pdb.create Enable/disable a Pod Disruption Budget creation
  create: false
  ## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  minAvailable: ""
  ## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable.
  maxUnavailable: ""

containerSecurityContext:
  ## @param containerSecurityContext.runAsUser User ID to run the container
  runAsUser: 11211
  ## @param containerSecurityContext.runAsNonRoot Run as non-root user
  runAsNonRoot: true
  ## @param containerSecurityContext.allowPrivilegeEscalation Set Memcached container's privilege escalation
  allowPrivilegeEscalation: false

## @param podSecurityContext Security context for the pod
podSecurityContext:
  ## @param podSecurityContext.fsGroup Set Memcached pod's Security Context fsGroup
  fsGroup: 11211

livenessProbe:
  ## @param livenessProbe.enabled Enable liveness probe
  enabled: true
  ## @param livenessProbe.initialDelaySeconds Initial delay before starting probes
  initialDelaySeconds: 30
  ## @param livenessProbe.periodSeconds How often to perform the probe
  periodSeconds: 10
  ## @param livenessProbe.timeoutSeconds Timeout for each probe attempt
  timeoutSeconds: 5
  ## @param livenessProbe.failureThreshold Number of failures before pod is restarted
  failureThreshold: 3
  ## @param livenessProbe.successThreshold Number of successes to mark probe as successful
  successThreshold: 1

readinessProbe:
  ## @param readinessProbe.enabled Enable readiness probe
  enabled: true
  ## @param readinessProbe.initialDelaySeconds Initial delay before starting probes
  initialDelaySeconds: 5
  ## @param readinessProbe.periodSeconds How often to perform the probe
  periodSeconds: 5
  ## @param readinessProbe.timeoutSeconds Timeout for each probe attempt
  timeoutSeconds: 5
  ## @param readinessProbe.failureThreshold Number of failures before pod is marked unready
  failureThreshold: 3
  ## @param readinessProbe.successThreshold Number of successes to mark probe as successful
  successThreshold: 1

## @param extraEnvVars Additional environment variables to set
extraEnvVars: []
  # - name: CUSTOM_VAR
  #   value: "custom-value"
  # - name: SECRET_VAR
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-secret
  #       key: secret-key

## @param extraVolumes Additional volumes to add to the pod
extraVolumes: []

## @param extraVolumeMounts Additional volume mounts to add to the Memcached container
extraVolumeMounts: []

## @param extraObjects Array of extra objects to deploy with the release
extraObjects: []


## @section Metrics parameters
## Prometheus metrics configuration
metrics:
  ## @param metrics.enabled Start a sidecar prometheus exporter to expose Memcached metrics
  enabled: false
  ## @param metrics.image.registry Memcached exporter image registry
  ## @param metrics.image.repository Memcached exporter image repository
  ## @param metrics.image.tag Memcached exporter image tag
  ## @param metrics.image.pullPolicy Memcached exporter image pull policy
  image:
    registry: docker.io
    repository: prom/memcached-exporter
    tag: "v0.15.4@sha256:b6763ecb3c47f2408e0398518851b7f8c5fc46232b2649f8c78a321130c54266"
    pullPolicy: Always
  ## @param metrics.resources Resource limits and requests for metrics container
  resources:
    limits:
      memory: 64Mi
    requests:
      cpu: 50m
      memory: 64Mi
  ## @param metrics.extraArgs Extra arguments for Memcached exporter, for example:
  ## extraArgs:
  ##   - --log.level=debug
  ##   - --log.format=json
  extraArgs: []
  ## Metrics service configuration
  service:
    ## @param metrics.service.type Metrics service type
    type: ClusterIP
    ## @param metrics.service.port Metrics service port
    port: 9150
    ## @param metrics.service.annotations Additional custom annotations for Metrics service
    annotations: {}
  ## Prometheus ServiceMonitor configuration
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
    enabled: false
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.relabelings Specify additional relabeling of metrics
    relabelings: []
    ## @param metrics.serviceMonitor.metricRelabelings Specify additional metric relabeling of metrics
    metricRelabelings: []
    ## @param metrics.serviceMonitor.honorLabels Honor metrics labels
    honorLabels: false
    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
    selector: {}
    ## @param metrics.serviceMonitor.annotations Additional custom annotations for the ServiceMonitor
    annotations: {}
    ## @param metrics.serviceMonitor.namespaceSelector Namespace selector for ServiceMonitor
    namespaceSelector: {}
