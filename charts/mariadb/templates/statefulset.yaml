{{- include "mariadb.validateValues.auth" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mariadb.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mariadb.labels" . | nindent 4 }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.galera.enabled }}
  replicas: {{ .Values.galera.replicaCount }}
  {{- else }}
  replicas: 1
  {{- end }}
  serviceName: {{ include "mariadb.fullname" . }}
  selector:
    matchLabels:
      {{- include "mariadb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "mariadb.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
{{- with (include "mariadb.imagePullSecrets" .) }}
{{- . | nindent 6 }}
{{- end }}
      securityContext: {{ include "common.renderPodSecurityContext" . | nindent 8 }}
      containers:
        - name: mariadb
          image: {{ include "mariadb.image" . }}
          imagePullPolicy: {{ .Values.image.imagePullPolicy }}
          securityContext: {{ include "common.renderContainerSecurityContext" . | nindent 12 }}
          {{- if .Values.galera.enabled }}
          #command: ['tail', '-f', '/dev/null']
          command:
            - /bin/bash
            - /usr/local/bin/galera-entrypoint.sh
          {{- end }}
          {{- if or .Values.auth.enabled .Values.auth.database .Values.auth.username .Values.auth.allowEmptyRootPassword .Values.env .Values.galera.enabled }}
          env:
            {{- if and .Values.auth.enabled }}
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mariadb.secretName" . }}
                  key: {{ .Values.auth.secretKeys.rootPasswordKey }}
            {{- if .Values.auth.database }}
            - name: MARIADB_DATABASE
              value: {{ .Values.auth.database | quote }}
            {{- end }}
            {{- if .Values.auth.username }}
            - name: MARIADB_USER
              value: {{ .Values.auth.username | quote }}
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mariadb.secretName" . }}
                  key: {{ .Values.auth.secretKeys.userPasswordKey }}
            {{- end }}
            {{- end }}
            {{- if .Values.auth.allowEmptyRootPassword }}
            - name: MARIADB_ALLOW_EMPTY_ROOT_PASSWORD
              value: "1"
            {{- end }}
            {{- if .Values.galera.enabled }}
            - name: MARIADB_GALERA_CLUSTER
              value: "true"
            - name: MARIADB_GALERA_CLUSTER_NAME
              value: {{ .Values.galera.name | quote }}
            - name: MARIADB_GALERA_CLUSTER_ADDRESS
              value: "gcomm://{{ include "mariadb.galeraClusterAddress" . }}"
            - name: MARIADB_GALERA_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MARIADB_GALERA_NODE_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MARIADB_GALERA_SST_USER
              value: {{ .Values.galera.sst.user | quote }}
            {{- if .Values.galera.sst.password }}
            - name: MARIADB_GALERA_SST_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mariadb.galeraSecretName" . }}
                  key: {{ .Values.galera.sst.secretKeys.passwordKey }}
            {{- end }}
            - name: MARIADB_GALERA_FORCE_SAFETOBOOTSTRAP
              value: {{ .Values.galera.forceSafeToBootstrap | quote }}
            {{- end }}
            {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
            {{- if .Values.galera.enabled }}
            - name: galera-repl
              containerPort: 4567
              protocol: TCP
            - name: galera-ist
              containerPort: 4568
              protocol: TCP
            - name: galera-sst
              containerPort: 4444
              protocol: TCP
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - bash
                - -c
                {{- if .Values.galera.enabled }}
                - |
                  healthcheck.sh --connect --innodb_initialized
                  # Also check Galera cluster status
                  if mysql -uroot -p"$MARIADB_ROOT_PASSWORD" -e "SHOW STATUS LIKE 'wsrep_ready'" | grep -q ON; then
                    exit 0
                  else
                    exit 1
                  fi
                {{- else }}
                - healthcheck.sh --connect --innodb_initialized
                {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                {{- if .Values.galera.enabled }}
                - |
                  healthcheck.sh --connect --innodb_initialized
                  # Check if node is synced in Galera cluster
                  if mysql -uroot -p"$MARIADB_ROOT_PASSWORD" -e "SHOW STATUS LIKE 'wsrep_local_state_comment'" | grep -q Synced; then
                    exit 0
                  else
                    exit 1
                  fi
                {{- else }}
                - healthcheck.sh --connect --innodb_initialized
                {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - bash
                - -c
                - healthcheck.sh --connect --innodb_initialized
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
            - mountPath: /tmp
              name: tmp-volume
            {{- if or .Values.config.customConfiguration .Values.config.existingConfigMap .Values.galera.enabled }}
            - name: config
              mountPath: /etc/mysql/conf.d
            {{- end }}
            {{- if .Values.galera.enabled }}
            - name: galera-config
              mountPath: /etc/mysql/galera.cnf
              subPath: galera.cnf
            - name: galera-scripts
              mountPath: /usr/local/bin/galera-entrypoint.sh
              subPath: galera-entrypoint.sh
            {{- end }}
            {{- if .Values.initdbScriptsConfigMap }}
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            {{- end }}
            {{- if .Values.containerSecurityContext.readOnlyRootFilesystem }}
            - name: run
              mountPath: /var/run/mysqld/
            {{- end }}
      volumes:
        - name: tmp-volume
          emptyDir: {}
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
        {{- if .Values.containerSecurityContext.readOnlyRootFilesystem }}
        - name: run
          emptyDir: {}
        {{- end }}
        {{- if or .Values.config.customConfiguration .Values.config.existingConfigMap .Values.galera.enabled }}
        - name: config
          configMap:
            name: {{ include "mariadb.configMapName" . }}
        {{- end }}
        {{- if .Values.galera.enabled }}
        - name: galera-config
          configMap:
            name: {{ include "mariadb.fullname" . }}-galera
        - name: galera-scripts
          configMap:
            name: {{ include "mariadb.fullname" . }}-galera-scripts
            defaultMode: 0755
        {{- end }}
        {{- if .Values.initdbScriptsConfigMap }}
        - name: custom-init-scripts
          configMap:
            name: {{ .Values.initdbScriptsConfigMap }}
        {{- end }}
        {{- range $secret := .Values.extraSecrets }}
        - name: {{ $secret.name }}
          secret:
            secretName: {{ $secret.name }}
            defaultMode: {{ $secret.defaultMode | default 0440 }}
        {{- end }}
        {{- range $config := .Values.extraConfigs }}
        - name: {{ $config.name }}
          configMap:
            name: {{ $config.name }}
            defaultMode: {{ $config.defaultMode | default 0440 }}
        {{- end }}
        {{- range $storage := .Values.extraVolumes }}
        - name: {{ $storage.name }}
          persistentVolumeClaim:
            claimName: {{ $storage.pvcName }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        {{- with .Values.commonLabels }}
        labels: 
{{ toYaml . | indent 10}}
        {{- end }}
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        {{- end }}
        {{- with .Values.persistence.selector }}
        selector:
          {{- toYaml . | nindent 10 }}
        {{- end }}
  {{- end }}
