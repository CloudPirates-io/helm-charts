name: "Pull Request"
on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main

jobs:
  lint-test:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.list-changed.outputs.changed }}
      changedCharts: ${{ steps.list-changed.outputs.changedCharts }}
    steps:
      - name: Setup Helm
        uses: Azure/setup-helm@v4.3.1

      - name: Checkout pull request branch
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ github.head_ref }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
      # yamllint (https://github.com/adrienverge/yamllint) which require Python
      - name: Set up Python
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: 3.x

      - name: Set up chart-testing-action
        uses: helm/chart-testing-action@v2.7.0

      - name: Get changed charts
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "Changed charts:"
            echo "$changed"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo 'changedCharts<<EOF' >> $GITHUB_OUTPUT
            echo $changed >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          else
            echo "No chart changes detected"
          fi

      - name: Installing plugin helm-unittest
        if: steps.list-changed.outputs.changed == 'true'
        run: helm plugin install https://github.com/helm-unittest/helm-unittest >/dev/null

      - name: Run chart testing (lint & unittest)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --validate-maintainers=false --additional-commands "helm unittest {{ .Path }}"

  update-changelog:
    runs-on: ubuntu-latest
    needs: [lint-test]
    name: Automatically update CHANGELOG
    permissions:
      contents: write
      pull-requests: write
    if: needs.lint-test.outputs.changed == 'true'
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Check if fork
        id: check-fork
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "is_fork=true" >> $GITHUB_OUTPUT
          else
            echo "is_fork=false" >> $GITHUB_OUTPUT
          fi

      - name: Fetch tags
        run: |
          git fetch --tags

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Generate changelog
        id: generate-changelog
        env:
          PULL_REQUEST_NUMBER: "${{ github.event.pull_request.number }}"
          PULL_REQUEST_URL: "${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.number }}"
          GITHUB_TOKEN: "${{ github.token }}"
          CHANGED_CHARTS: ${{ needs.lint-test.outputs.changedCharts }}
        run: |
          PR_TITLE="$(gh api "/repos/${GITHUB_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER}" | jq -r '.title')"
          for chart_directory in ${CHANGED_CHARTS}; do
            CHART_NAME=${chart_directory#charts/}
            echo "Updating CHANGELOG for chart $CHART_NAME"

            # Extract version from Chart.yaml
            CHART_VERSION=$(yq eval '.version' "${GITHUB_WORKSPACE}/charts/${CHART_NAME}/Chart.yaml")
            CHANGELOG_FILE="${GITHUB_WORKSPACE}/charts/${CHART_NAME}/CHANGELOG.md"
            CHANGELOG_TMP_FILE="${GITHUB_WORKSPACE}/charts/${CHART_NAME}/CHANGELOG.md.tmp"

            touch "$CHANGELOG_FILE"

            # Generate new CHANGELOG.md with conventional-changelog
            npx conventional-changelog-cli -i "$CHANGELOG_FILE" -s -t "${CHART_NAME}-" -r 0 --commit-path "charts/${CHART_NAME}"

            # Remove unreleased section that conventional-changelog adds for uncommitted changes
            # The unreleased section has format "## <date>" while released sections have "## version <date>" or "## <small>version</small> <date>"
            # We preserve the h1 heading and all properly versioned sections
            awk '
              BEGIN { in_unreleased=0; found_versioned=0 }
              /^# / { print; next }
              /^## [0-9]/ || /^## <small>[0-9]/ { found_versioned=1; in_unreleased=0; print; next }
              /^## \(/ || /^## [0-9]{4}-[0-9]{2}-[0-9]{2}/ {
                if (!found_versioned) { in_unreleased=1; next }
                print; next
              }
              !in_unreleased { print }
            ' "$CHANGELOG_FILE" > "$CHANGELOG_TMP_FILE"

            # Remove chart name prefixes from commit messages (case insensitive)
            sed -i -E "s/\* \[${CHART_NAME}\] /\* /gi" "$CHANGELOG_TMP_FILE"
            sed -i -E "s/\* \[$(echo ${CHART_NAME} | tr '[:lower:]' '[:upper:]')\] /\* /gi" "$CHANGELOG_TMP_FILE"

            # Clean up spacing: remove extra blank lines but keep structure
            sed -i -E '/^$/N;/^\n$/D' "$CHANGELOG_TMP_FILE"

            # Build final changelog: h1 header + new version entry + existing entries
            {
              echo "# Changelog"
              echo ""
              echo "## $CHART_VERSION ($(date +'%Y-%m-%d'))"
              echo ""
              echo "* ${PR_TITLE} ([#${PULL_REQUEST_NUMBER}](${PULL_REQUEST_URL}))"
              echo ""
              # Append all existing versioned entries (skip h1 header if present)
              awk '/^# / {next} {print}' "$CHANGELOG_TMP_FILE"
            } > "$CHANGELOG_FILE"

            rm "$CHANGELOG_TMP_FILE"
            
            # Commit all changes, if any
            if git status -s | grep "charts/${CHART_NAME}/CHANGELOG.md"; then
              git add "charts/${CHART_NAME}/CHANGELOG.md"
              git commit -m "Update CHANGELOG.md" --signoff
            fi
          done

      - name: Push changes (same repo)
        if: steps.check-fork.outputs.is_fork == 'false'
        run: |
          # Push all the new commits, if any
          if [[ $(git cherry -v) ]]; then
            git push
          else
            echo "No changed CHANGELOGS, skip push"
          fi

      - name: Push changes (fork)
        if: steps.check-fork.outputs.is_fork == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # For forks, we need to push to the fork's branch with proper authentication
          # The GITHUB_TOKEN has permissions to push to forks via pull_request_target
          if [[ $(git cherry -v) ]]; then
            git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.event.pull_request.head.repo.full_name }}.git HEAD:${{ github.event.pull_request.head.ref }}
          else
            echo "No changed CHANGELOGS, skip push"
          fi
