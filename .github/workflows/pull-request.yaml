name: "Pull Request"
on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    outputs:
      changed: ${{ steps.list-changed.outputs.changed }}
      changedCharts: ${{ steps.list-changed.outputs.changedCharts }}
    steps:
      - name: Setup Helm
        uses: Azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1

      - name: Checkout pull request branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.head_ref }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
      # yamllint (https://github.com/adrienverge/yamllint) which require Python
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: 3.x

      - name: Set up chart-testing-action
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Get changed charts
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "Changed charts:"
            echo "$changed"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo 'changedCharts<<EOF' >> $GITHUB_OUTPUT
            echo $changed >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          else
            echo "No chart changes detected"
          fi

      - name: Cache Helm plugins
        if: steps.list-changed.outputs.changed == 'true'
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.local/share/helm/plugins
          key: ${{ runner.os }}-helm-plugins-${{ hashFiles('**/plugin.yaml') }}
          restore-keys: |
            ${{ runner.os }}-helm-plugins-

      - name: Installing plugin helm-unittest
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          if ! helm plugin list | grep -q unittest; then
            helm plugin install https://github.com/helm-unittest/helm-unittest
          else
            echo "helm-unittest plugin already installed"
          fi

      - name: Run chart testing (lint & unittest)
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          ct lint --target-branch ${{ github.event.repository.default_branch }} --validate-maintainers=false --additional-commands 'helm unittest {{ .Path }}'

  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    needs: [lint-test]
    if: needs.lint-test.outputs.changed == 'true'
    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.head_ref }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      - name: Setup Helm
        uses: Azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1

      - name: Setup kubectl
        uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede # v4.0.1

      - name: Create kind cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          cluster_name: helm-chart-test
          wait: 300s

      - name: Cache Helm plugins
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.local/share/helm/plugins
          key: ${{ runner.os }}-helm-plugins-${{ hashFiles('**/plugin.yaml') }}
          restore-keys: |
            ${{ runner.os }}-helm-plugins-

      - name: Installing plugin helm-unittest
        run: |
          if ! helm plugin list | grep -q unittest; then
            helm plugin install https://github.com/helm-unittest/helm-unittest
          else
            echo "helm-unittest plugin already installed"
          fi

      - name: Run integration tests
        env:
          CHANGED_CHARTS: ${{ needs.lint-test.outputs.changedCharts }}
        run: |
          # Make script executable
          chmod +x ./test-charts.sh

          # Test each changed chart
          for chart_directory in ${CHANGED_CHARTS}; do
            CHART_NAME=${chart_directory#charts/}
            echo "Testing chart: $CHART_NAME"

            # Check if integration test is disabled for this chart
            if [ -f "${chart_directory}/.disable-unittest" ]; then
              echo "⏩ Skipping integration test for $CHART_NAME (.disable-unittest found)"
              continue
            fi

            # Run test script without cluster creation (kind-action already created it)
            # and without cleanup (let GitHub Actions handle it)
            ./test-charts.sh "$CHART_NAME" --no-cleanup
          done

  update-changelog:
    runs-on: ubuntu-latest
    needs: [lint-test]
    name: Automatically update CHANGELOG
    permissions:
      contents: write
      pull-requests: write
    if: always() && needs.lint-test.outputs.changed == 'true'
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v5.0.0
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Add upstream remote and fetch tags
        run: |
          # Always fetch tags from the canonical upstream repository
          UPSTREAM_REPO="CloudPirates-io/helm-charts"
          echo "Fetching tags from upstream: ${UPSTREAM_REPO}"
          git remote add upstream https://github.com/${UPSTREAM_REPO}.git || true
          git fetch upstream --tags

          # Also fetch tags from origin (the fork/current repo)
          git fetch origin --tags || true

          # List all tags for debugging
          echo "Available tags:"
          git tag -l | head -20

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Generate changelog and commit
        id: check-changes
        shell: bash
        env:
          PULL_REQUEST_NUMBER: "${{ github.event.pull_request.number }}"
          PULL_REQUEST_URL: "${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.number }}"
          GITHUB_TOKEN: "${{ github.token }}"
          GITHUB_REPOSITORY: "${{ github.repository }}"
          GITHUB_REPOSITORY_URL: "${{ github.server_url }}/${{ github.repository }}"
          CHANGED_CHARTS: ${{ needs.lint-test.outputs.changedCharts }}
        run: |
          set -e
          PR_TITLE="$(gh api "/repos/${GITHUB_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER}" | jq -r '.title')"

          # Extract chart names from changed chart directories
          CHART_NAMES=()
          for chart_directory in ${CHANGED_CHARTS}; do
            CHART_NAME=${chart_directory#charts/}
            CHART_NAMES+=("--chart" "$CHART_NAME")
          done

          # Run the changelog generation script
          ./generate-changelog.sh \
            "${CHART_NAMES[@]}" \
            --pr-title "${PR_TITLE}" \
            --pr-number "${PULL_REQUEST_NUMBER}" \
            --pr-url "${PULL_REQUEST_URL}"

          # Check if there are changes
          if git status --porcelain | grep -q 'CHANGELOG.md'; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No CHANGELOG changes"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push via GitHub API
        id: push-changes
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');

            try {
              const headRef = '${{ github.event.pull_request.head.ref }}';
              const headRepo = '${{ github.event.pull_request.head.repo.full_name }}';
              const [owner, repo] = headRepo.split('/');

              // Get current branch SHA
              const { data: refData } = await github.rest.git.getRef({
                owner,
                repo,
                ref: `heads/${headRef}`
              });
              const currentSha = refData.object.sha;
              console.log('Current branch SHA:', currentSha);

              // Get the tree for current commit
              const { data: commitData } = await github.rest.git.getCommit({
                owner,
                repo,
                commit_sha: currentSha
              });
              const baseTreeSha = commitData.tree.sha;

              // Get all changed CHANGELOG files
              const changedFiles = execSync('git status --porcelain').toString()
                .split('\n')
                .filter(line => line.includes('CHANGELOG.md'))
                .map(line => line.trim().split(/\s+/)[1])
                .filter(Boolean);

              console.log('Changed files:', changedFiles);

              // Create blobs for each changed file
              const blobs = await Promise.all(
                changedFiles.map(async (file) => {
                  const content = fs.readFileSync(file, 'utf8');
                  const { data: blob } = await github.rest.git.createBlob({
                    owner,
                    repo,
                    content,
                    encoding: 'utf-8'
                  });
                  return { path: file, sha: blob.sha, mode: '100644', type: 'blob' };
                })
              );

              // Create new tree
              const { data: newTree } = await github.rest.git.createTree({
                owner,
                repo,
                base_tree: baseTreeSha,
                tree: blobs
              });

              // Create commit (this will be automatically signed by GitHub)
              const { data: newCommit } = await github.rest.git.createCommit({
                owner,
                repo,
                message: 'chore: update CHANGELOG.md for changed charts\n\nSigned-off-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>',
                tree: newTree.sha,
                parents: [currentSha]
              });

              console.log('Created commit:', newCommit.sha);

              // Update reference
              await github.rest.git.updateRef({
                owner,
                repo,
                ref: `heads/${headRef}`,
                sha: newCommit.sha,
                force: false
              });

              console.log('✅ Successfully committed and pushed changelog updates');
              core.notice('✅ Changelog updated and pushed successfully');

            } catch (error) {
              console.error('Failed to commit via GitHub API:', error);
              core.setFailed(`Unable to push changelog updates: ${error.message}`);
            }
